// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_cloud_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote_cloud_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rtp_plus_plus {

namespace {

const ::google::protobuf::Descriptor* CalleeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalleeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_remote_5fcloud_5fcontrol_2eproto() {
  protobuf_AddDesc_remote_5fcloud_5fcontrol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "remote_cloud_control.proto");
  GOOGLE_CHECK(file != NULL);
  CalleeInfo_descriptor_ = file->message_type(0);
  static const int CalleeInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, sip_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, call_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, transport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, video_media_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, video_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, kbps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, rtx_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, buf_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, rapid_sync_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, rtcp_sr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, rtcp_fb_),
  };
  CalleeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalleeInfo_descriptor_,
      CalleeInfo::default_instance_,
      CalleeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CalleeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalleeInfo, _is_default_instance_));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, description_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_remote_5fcloud_5fcontrol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalleeInfo_descriptor_, &CalleeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_remote_5fcloud_5fcontrol_2eproto() {
  delete CalleeInfo::default_instance_;
  delete CalleeInfo_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_remote_5fcloud_5fcontrol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032remote_cloud_control.proto\022\rrtp_plus_p"
    "lus\"\360\001\n\nCalleeInfo\022\017\n\007sip_uri\030\001 \001(\t\022\025\n\rc"
    "all_duration\030\002 \001(\005\022\021\n\ttransport\030\003 \001(\005\022\030\n"
    "\020video_media_type\030\004 \001(\t\022\024\n\014video_device\030"
    "\005 \001(\t\022\013\n\003fps\030\006 \001(\005\022\014\n\004kbps\030\007 \001(\005\022\020\n\010rtx_"
    "time\030\010 \001(\005\022\017\n\007buf_lat\030\t \001(\005\022\027\n\017rapid_syn"
    "c_mode\030\n \001(\005\022\017\n\007rtcp_sr\030\013 \001(\005\022\017\n\007rtcp_fb"
    "\030\014 \001(\t\"6\n\010Response\022\025\n\rresponse_code\030\001 \001("
    "\005\022\023\n\013description\030\002 \001(\t2X\n\030RemoteCallCont"
    "rolService\022<\n\004call\022\031.rtp_plus_plus.Calle"
    "eInfo\032\027.rtp_plus_plus.Response\"\000b\006proto3", 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remote_cloud_control.proto", &protobuf_RegisterTypes);
  CalleeInfo::default_instance_ = new CalleeInfo();
  Response::default_instance_ = new Response();
  CalleeInfo::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remote_5fcloud_5fcontrol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remote_5fcloud_5fcontrol_2eproto {
  StaticDescriptorInitializer_remote_5fcloud_5fcontrol_2eproto() {
    protobuf_AddDesc_remote_5fcloud_5fcontrol_2eproto();
  }
} static_descriptor_initializer_remote_5fcloud_5fcontrol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CalleeInfo::kSipUriFieldNumber;
const int CalleeInfo::kCallDurationFieldNumber;
const int CalleeInfo::kTransportFieldNumber;
const int CalleeInfo::kVideoMediaTypeFieldNumber;
const int CalleeInfo::kVideoDeviceFieldNumber;
const int CalleeInfo::kFpsFieldNumber;
const int CalleeInfo::kKbpsFieldNumber;
const int CalleeInfo::kRtxTimeFieldNumber;
const int CalleeInfo::kBufLatFieldNumber;
const int CalleeInfo::kRapidSyncModeFieldNumber;
const int CalleeInfo::kRtcpSrFieldNumber;
const int CalleeInfo::kRtcpFbFieldNumber;
#endif  // !_MSC_VER

CalleeInfo::CalleeInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rtp_plus_plus.CalleeInfo)
}

void CalleeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CalleeInfo::CalleeInfo(const CalleeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rtp_plus_plus.CalleeInfo)
}

void CalleeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sip_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_duration_ = 0;
  transport_ = 0;
  video_media_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fps_ = 0;
  kbps_ = 0;
  rtx_time_ = 0;
  buf_lat_ = 0;
  rapid_sync_mode_ = 0;
  rtcp_sr_ = 0;
  rtcp_fb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CalleeInfo::~CalleeInfo() {
  // @@protoc_insertion_point(destructor:rtp_plus_plus.CalleeInfo)
  SharedDtor();
}

void CalleeInfo::SharedDtor() {
  sip_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_media_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtcp_fb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CalleeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalleeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalleeInfo_descriptor_;
}

const CalleeInfo& CalleeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5fcloud_5fcontrol_2eproto();
  return *default_instance_;
}

CalleeInfo* CalleeInfo::default_instance_ = NULL;

CalleeInfo* CalleeInfo::New(::google::protobuf::Arena* arena) const {
  CalleeInfo* n = new CalleeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalleeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CalleeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(call_duration_, transport_);
  ZR_(fps_, rtx_time_);
  sip_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_media_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(buf_lat_, rtcp_sr_);
  rtcp_fb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool CalleeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rtp_plus_plus.CalleeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sip_uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sip_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sip_uri().data(), this->sip_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtp_plus_plus.CalleeInfo.sip_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_call_duration;
        break;
      }

      // optional int32 call_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_call_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transport;
        break;
      }

      // optional int32 transport = 3;
      case 3: {
        if (tag == 24) {
         parse_transport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_video_media_type;
        break;
      }

      // optional string video_media_type = 4;
      case 4: {
        if (tag == 34) {
         parse_video_media_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_media_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_media_type().data(), this->video_media_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtp_plus_plus.CalleeInfo.video_media_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video_device;
        break;
      }

      // optional string video_device = 5;
      case 5: {
        if (tag == 42) {
         parse_video_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_device().data(), this->video_device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtp_plus_plus.CalleeInfo.video_device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fps;
        break;
      }

      // optional int32 fps = 6;
      case 6: {
        if (tag == 48) {
         parse_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kbps;
        break;
      }

      // optional int32 kbps = 7;
      case 7: {
        if (tag == 56) {
         parse_kbps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kbps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rtx_time;
        break;
      }

      // optional int32 rtx_time = 8;
      case 8: {
        if (tag == 64) {
         parse_rtx_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtx_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_buf_lat;
        break;
      }

      // optional int32 buf_lat = 9;
      case 9: {
        if (tag == 72) {
         parse_buf_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buf_lat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rapid_sync_mode;
        break;
      }

      // optional int32 rapid_sync_mode = 10;
      case 10: {
        if (tag == 80) {
         parse_rapid_sync_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rapid_sync_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_rtcp_sr;
        break;
      }

      // optional int32 rtcp_sr = 11;
      case 11: {
        if (tag == 88) {
         parse_rtcp_sr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtcp_sr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rtcp_fb;
        break;
      }

      // optional string rtcp_fb = 12;
      case 12: {
        if (tag == 98) {
         parse_rtcp_fb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtcp_fb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtcp_fb().data(), this->rtcp_fb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtp_plus_plus.CalleeInfo.rtcp_fb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rtp_plus_plus.CalleeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rtp_plus_plus.CalleeInfo)
  return false;
#undef DO_
}

void CalleeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rtp_plus_plus.CalleeInfo)
  // optional string sip_uri = 1;
  if (this->sip_uri().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sip_uri().data(), this->sip_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.sip_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sip_uri(), output);
  }

  // optional int32 call_duration = 2;
  if (this->call_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->call_duration(), output);
  }

  // optional int32 transport = 3;
  if (this->transport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transport(), output);
  }

  // optional string video_media_type = 4;
  if (this->video_media_type().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_media_type().data(), this->video_media_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.video_media_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->video_media_type(), output);
  }

  // optional string video_device = 5;
  if (this->video_device().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_device().data(), this->video_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.video_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->video_device(), output);
  }

  // optional int32 fps = 6;
  if (this->fps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fps(), output);
  }

  // optional int32 kbps = 7;
  if (this->kbps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kbps(), output);
  }

  // optional int32 rtx_time = 8;
  if (this->rtx_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rtx_time(), output);
  }

  // optional int32 buf_lat = 9;
  if (this->buf_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buf_lat(), output);
  }

  // optional int32 rapid_sync_mode = 10;
  if (this->rapid_sync_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rapid_sync_mode(), output);
  }

  // optional int32 rtcp_sr = 11;
  if (this->rtcp_sr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rtcp_sr(), output);
  }

  // optional string rtcp_fb = 12;
  if (this->rtcp_fb().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtcp_fb().data(), this->rtcp_fb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.rtcp_fb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->rtcp_fb(), output);
  }

  // @@protoc_insertion_point(serialize_end:rtp_plus_plus.CalleeInfo)
}

::google::protobuf::uint8* CalleeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtp_plus_plus.CalleeInfo)
  // optional string sip_uri = 1;
  if (this->sip_uri().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sip_uri().data(), this->sip_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.sip_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sip_uri(), target);
  }

  // optional int32 call_duration = 2;
  if (this->call_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->call_duration(), target);
  }

  // optional int32 transport = 3;
  if (this->transport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->transport(), target);
  }

  // optional string video_media_type = 4;
  if (this->video_media_type().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_media_type().data(), this->video_media_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.video_media_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->video_media_type(), target);
  }

  // optional string video_device = 5;
  if (this->video_device().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_device().data(), this->video_device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.video_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->video_device(), target);
  }

  // optional int32 fps = 6;
  if (this->fps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fps(), target);
  }

  // optional int32 kbps = 7;
  if (this->kbps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kbps(), target);
  }

  // optional int32 rtx_time = 8;
  if (this->rtx_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rtx_time(), target);
  }

  // optional int32 buf_lat = 9;
  if (this->buf_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buf_lat(), target);
  }

  // optional int32 rapid_sync_mode = 10;
  if (this->rapid_sync_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rapid_sync_mode(), target);
  }

  // optional int32 rtcp_sr = 11;
  if (this->rtcp_sr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rtcp_sr(), target);
  }

  // optional string rtcp_fb = 12;
  if (this->rtcp_fb().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtcp_fb().data(), this->rtcp_fb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.CalleeInfo.rtcp_fb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rtcp_fb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rtp_plus_plus.CalleeInfo)
  return target;
}

int CalleeInfo::ByteSize() const {
  int total_size = 0;

  // optional string sip_uri = 1;
  if (this->sip_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sip_uri());
  }

  // optional int32 call_duration = 2;
  if (this->call_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->call_duration());
  }

  // optional int32 transport = 3;
  if (this->transport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transport());
  }

  // optional string video_media_type = 4;
  if (this->video_media_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_media_type());
  }

  // optional string video_device = 5;
  if (this->video_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_device());
  }

  // optional int32 fps = 6;
  if (this->fps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fps());
  }

  // optional int32 kbps = 7;
  if (this->kbps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kbps());
  }

  // optional int32 rtx_time = 8;
  if (this->rtx_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rtx_time());
  }

  // optional int32 buf_lat = 9;
  if (this->buf_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buf_lat());
  }

  // optional int32 rapid_sync_mode = 10;
  if (this->rapid_sync_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rapid_sync_mode());
  }

  // optional int32 rtcp_sr = 11;
  if (this->rtcp_sr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rtcp_sr());
  }

  // optional string rtcp_fb = 12;
  if (this->rtcp_fb().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rtcp_fb());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalleeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CalleeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalleeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalleeInfo::MergeFrom(const CalleeInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sip_uri().size() > 0) {

    sip_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sip_uri_);
  }
  if (from.call_duration() != 0) {
    set_call_duration(from.call_duration());
  }
  if (from.transport() != 0) {
    set_transport(from.transport());
  }
  if (from.video_media_type().size() > 0) {

    video_media_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_media_type_);
  }
  if (from.video_device().size() > 0) {

    video_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_device_);
  }
  if (from.fps() != 0) {
    set_fps(from.fps());
  }
  if (from.kbps() != 0) {
    set_kbps(from.kbps());
  }
  if (from.rtx_time() != 0) {
    set_rtx_time(from.rtx_time());
  }
  if (from.buf_lat() != 0) {
    set_buf_lat(from.buf_lat());
  }
  if (from.rapid_sync_mode() != 0) {
    set_rapid_sync_mode(from.rapid_sync_mode());
  }
  if (from.rtcp_sr() != 0) {
    set_rtcp_sr(from.rtcp_sr());
  }
  if (from.rtcp_fb().size() > 0) {

    rtcp_fb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtcp_fb_);
  }
}

void CalleeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalleeInfo::CopyFrom(const CalleeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalleeInfo::IsInitialized() const {

  return true;
}

void CalleeInfo::Swap(CalleeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalleeInfo::InternalSwap(CalleeInfo* other) {
  sip_uri_.Swap(&other->sip_uri_);
  std::swap(call_duration_, other->call_duration_);
  std::swap(transport_, other->transport_);
  video_media_type_.Swap(&other->video_media_type_);
  video_device_.Swap(&other->video_device_);
  std::swap(fps_, other->fps_);
  std::swap(kbps_, other->kbps_);
  std::swap(rtx_time_, other->rtx_time_);
  std::swap(buf_lat_, other->buf_lat_);
  std::swap(rapid_sync_mode_, other->rapid_sync_mode_);
  std::swap(rtcp_sr_, other->rtcp_sr_);
  rtcp_fb_.Swap(&other->rtcp_fb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalleeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalleeInfo_descriptor_;
  metadata.reflection = CalleeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kResponseCodeFieldNumber;
const int Response::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rtp_plus_plus.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rtp_plus_plus.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:rtp_plus_plus.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5fcloud_5fcontrol_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
  response_code_ = 0;
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rtp_plus_plus.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtp_plus_plus.Response.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rtp_plus_plus.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rtp_plus_plus.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rtp_plus_plus.Response)
  // optional int32 response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_code(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.Response.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:rtp_plus_plus.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtp_plus_plus.Response)
  // optional int32 response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_code(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtp_plus_plus.Response.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rtp_plus_plus.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // optional int32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_code());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(response_code_, other->response_code_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtp_plus_plus

// @@protoc_insertion_point(global_scope)

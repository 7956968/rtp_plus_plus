// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: remote_cloud_control.proto

#include "remote_cloud_control.pb.h"
#include "remote_cloud_control.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace rtp_plus_plus {

static const char* RemoteCallControlService_method_names[] = {
  "/rtp_plus_plus.RemoteCallControlService/call",
};

std::unique_ptr< RemoteCallControlService::Stub> RemoteCallControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< RemoteCallControlService::Stub> stub(new RemoteCallControlService::Stub(channel));
  return stub;
}

RemoteCallControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_call_(RemoteCallControlService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(RemoteCallControlService_method_names[0]))
  {}

::grpc::Status RemoteCallControlService::Stub::call(::grpc::ClientContext* context, const ::rtp_plus_plus::CalleeInfo& request, ::rtp_plus_plus::Response* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_call_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rtp_plus_plus::Response>* RemoteCallControlService::Stub::AsynccallRaw(::grpc::ClientContext* context, const ::rtp_plus_plus::CalleeInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::rtp_plus_plus::Response>(channel(), cq, rpcmethod_call_, context, request, tag);
}

RemoteCallControlService::AsyncService::AsyncService(::grpc::CompletionQueue* cq) : ::grpc::AsynchronousService(cq, RemoteCallControlService_method_names, 1) {}

RemoteCallControlService::Service::~Service() {
  delete service_;
}

::grpc::Status RemoteCallControlService::Service::call(::grpc::ServerContext* context, const ::rtp_plus_plus::CalleeInfo* request, ::rtp_plus_plus::Response* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void RemoteCallControlService::AsyncService::Requestcall(::grpc::ServerContext* context, ::rtp_plus_plus::CalleeInfo* request, ::grpc::ServerAsyncResponseWriter< ::rtp_plus_plus::Response>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, cq, tag);
}

::grpc::RpcService* RemoteCallControlService::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      RemoteCallControlService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RemoteCallControlService::Service, ::rtp_plus_plus::CalleeInfo, ::rtp_plus_plus::Response>(
          std::mem_fn(&RemoteCallControlService::Service::call), this),
      new ::rtp_plus_plus::CalleeInfo, new ::rtp_plus_plus::Response));
  return service_;
}


}  // namespace rtp_plus_plus


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_connection_api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "peer_connection_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peer_connection {

namespace {

const ::google::protobuf::Descriptor* OfferDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionDescriptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionDescriptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSessionDescriptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSessionDescriptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartStreamingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartStreamingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartStreamingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartStreamingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopStreamingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopStreamingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopStreamingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopStreamingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_peer_5fconnection_5fapi_2eproto() {
  protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "peer_connection_api.proto");
  GOOGLE_CHECK(file != NULL);
  OfferDescriptor_descriptor_ = file->message_type(0);
  static const int OfferDescriptor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDescriptor, content_type_),
  };
  OfferDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OfferDescriptor_descriptor_,
      OfferDescriptor::default_instance_,
      OfferDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(OfferDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDescriptor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDescriptor, _is_default_instance_));
  AnswerDescriptor_descriptor_ = file->message_type(1);
  static const int AnswerDescriptor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerDescriptor, session_description_),
  };
  AnswerDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnswerDescriptor_descriptor_,
      AnswerDescriptor::default_instance_,
      AnswerDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnswerDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerDescriptor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerDescriptor, _is_default_instance_));
  CreateSessionDescriptionResponse_descriptor_ = file->message_type(2);
  static const int CreateSessionDescriptionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionDescriptionResponse, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionDescriptionResponse, response_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionDescriptionResponse, session_description_),
  };
  CreateSessionDescriptionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionDescriptionResponse_descriptor_,
      CreateSessionDescriptionResponse::default_instance_,
      CreateSessionDescriptionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateSessionDescriptionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionDescriptionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionDescriptionResponse, _is_default_instance_));
  SetSessionDescriptionResponse_descriptor_ = file->message_type(3);
  static const int SetSessionDescriptionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionDescriptionResponse, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionDescriptionResponse, response_description_),
  };
  SetSessionDescriptionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetSessionDescriptionResponse_descriptor_,
      SetSessionDescriptionResponse::default_instance_,
      SetSessionDescriptionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetSessionDescriptionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionDescriptionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionDescriptionResponse, _is_default_instance_));
  SessionDescription_descriptor_ = file->message_type(4);
  static const int SessionDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDescription, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDescription, session_description_),
  };
  SessionDescription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionDescription_descriptor_,
      SessionDescription::default_instance_,
      SessionDescription_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionDescription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDescription, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDescription, _is_default_instance_));
  StartStreamingRequest_descriptor_ = file->message_type(5);
  static const int StartStreamingRequest_offsets_[1] = {
  };
  StartStreamingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartStreamingRequest_descriptor_,
      StartStreamingRequest::default_instance_,
      StartStreamingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartStreamingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStreamingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStreamingRequest, _is_default_instance_));
  StartStreamingResponse_descriptor_ = file->message_type(6);
  static const int StartStreamingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStreamingResponse, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStreamingResponse, response_description_),
  };
  StartStreamingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartStreamingResponse_descriptor_,
      StartStreamingResponse::default_instance_,
      StartStreamingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartStreamingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStreamingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStreamingResponse, _is_default_instance_));
  StopStreamingRequest_descriptor_ = file->message_type(7);
  static const int StopStreamingRequest_offsets_[1] = {
  };
  StopStreamingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopStreamingRequest_descriptor_,
      StopStreamingRequest::default_instance_,
      StopStreamingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopStreamingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamingRequest, _is_default_instance_));
  StopStreamingResponse_descriptor_ = file->message_type(8);
  static const int StopStreamingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamingResponse, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamingResponse, response_description_),
  };
  StopStreamingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopStreamingResponse_descriptor_,
      StopStreamingResponse::default_instance_,
      StopStreamingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopStreamingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopStreamingResponse, _is_default_instance_));
  ShutdownRequest_descriptor_ = file->message_type(9);
  static const int ShutdownRequest_offsets_[1] = {
  };
  ShutdownRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownRequest_descriptor_,
      ShutdownRequest::default_instance_,
      ShutdownRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShutdownRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _is_default_instance_));
  ShutdownResponse_descriptor_ = file->message_type(10);
  static const int ShutdownResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, response_description_),
  };
  ShutdownResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownResponse_descriptor_,
      ShutdownResponse::default_instance_,
      ShutdownResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShutdownResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_peer_5fconnection_5fapi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OfferDescriptor_descriptor_, &OfferDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnswerDescriptor_descriptor_, &AnswerDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionDescriptionResponse_descriptor_, &CreateSessionDescriptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetSessionDescriptionResponse_descriptor_, &SetSessionDescriptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionDescription_descriptor_, &SessionDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartStreamingRequest_descriptor_, &StartStreamingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartStreamingResponse_descriptor_, &StartStreamingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopStreamingRequest_descriptor_, &StopStreamingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopStreamingResponse_descriptor_, &StopStreamingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownRequest_descriptor_, &ShutdownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownResponse_descriptor_, &ShutdownResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_peer_5fconnection_5fapi_2eproto() {
  delete OfferDescriptor::default_instance_;
  delete OfferDescriptor_reflection_;
  delete AnswerDescriptor::default_instance_;
  delete AnswerDescriptor_reflection_;
  delete CreateSessionDescriptionResponse::default_instance_;
  delete CreateSessionDescriptionResponse_reflection_;
  delete SetSessionDescriptionResponse::default_instance_;
  delete SetSessionDescriptionResponse_reflection_;
  delete SessionDescription::default_instance_;
  delete SessionDescription_reflection_;
  delete StartStreamingRequest::default_instance_;
  delete StartStreamingRequest_reflection_;
  delete StartStreamingResponse::default_instance_;
  delete StartStreamingResponse_reflection_;
  delete StopStreamingRequest::default_instance_;
  delete StopStreamingRequest_reflection_;
  delete StopStreamingResponse::default_instance_;
  delete StopStreamingResponse_reflection_;
  delete ShutdownRequest::default_instance_;
  delete ShutdownRequest_reflection_;
  delete ShutdownResponse::default_instance_;
  delete ShutdownResponse_reflection_;
}

void protobuf_AddDesc_peer_5fconnection_5fapi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031peer_connection_api.proto\022\017peer_connec"
    "tion\"\'\n\017OfferDescriptor\022\024\n\014content_type\030"
    "\001 \001(\t\"T\n\020AnswerDescriptor\022@\n\023session_des"
    "cription\030\001 \001(\0132#.peer_connection.Session"
    "Description\"\231\001\n CreateSessionDescription"
    "Response\022\025\n\rresponse_code\030\001 \001(\r\022\034\n\024respo"
    "nse_description\030\002 \001(\t\022@\n\023session_descrip"
    "tion\030\003 \001(\0132#.peer_connection.SessionDesc"
    "ription\"T\n\035SetSessionDescriptionResponse"
    "\022\025\n\rresponse_code\030\001 \001(\r\022\034\n\024response_desc"
    "ription\030\002 \001(\t\"G\n\022SessionDescription\022\024\n\014c"
    "ontent_type\030\001 \001(\t\022\033\n\023session_description"
    "\030\002 \001(\t\"\027\n\025StartStreamingRequest\"M\n\026Start"
    "StreamingResponse\022\025\n\rresponse_code\030\001 \001(\r"
    "\022\034\n\024response_description\030\002 \001(\t\"\026\n\024StopSt"
    "reamingRequest\"L\n\025StopStreamingResponse\022"
    "\025\n\rresponse_code\030\001 \001(\r\022\034\n\024response_descr"
    "iption\030\002 \001(\t\"\021\n\017ShutdownRequest\"G\n\020Shutd"
    "ownResponse\022\025\n\rresponse_code\030\001 \001(\r\022\034\n\024re"
    "sponse_description\030\002 \001(\t2\330\005\n\021PeerConnect"
    "ionApi\022d\n\013createOffer\022 .peer_connection."
    "OfferDescriptor\0321.peer_connection.Create"
    "SessionDescriptionResponse\"\000\022f\n\014createAn"
    "swer\022!.peer_connection.AnswerDescriptor\032"
    "1.peer_connection.CreateSessionDescripti"
    "onResponse\"\000\022l\n\023setLocalDescription\022#.pe"
    "er_connection.SessionDescription\032..peer_"
    "connection.SetSessionDescriptionResponse"
    "\"\000\022m\n\024setRemoteDescription\022#.peer_connec"
    "tion.SessionDescription\032..peer_connectio"
    "n.SetSessionDescriptionResponse\"\000\022c\n\016sta"
    "rtStreaming\022&.peer_connection.StartStrea"
    "mingRequest\032\'.peer_connection.StartStrea"
    "mingResponse\"\000\022`\n\rstopStreaming\022%.peer_c"
    "onnection.StopStreamingRequest\032&.peer_co"
    "nnection.StopStreamingResponse\"\000\022Q\n\010shut"
    "down\022 .peer_connection.ShutdownRequest\032!"
    ".peer_connection.ShutdownResponse\"\000b\006pro"
    "to3", 1523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peer_connection_api.proto", &protobuf_RegisterTypes);
  OfferDescriptor::default_instance_ = new OfferDescriptor();
  AnswerDescriptor::default_instance_ = new AnswerDescriptor();
  CreateSessionDescriptionResponse::default_instance_ = new CreateSessionDescriptionResponse();
  SetSessionDescriptionResponse::default_instance_ = new SetSessionDescriptionResponse();
  SessionDescription::default_instance_ = new SessionDescription();
  StartStreamingRequest::default_instance_ = new StartStreamingRequest();
  StartStreamingResponse::default_instance_ = new StartStreamingResponse();
  StopStreamingRequest::default_instance_ = new StopStreamingRequest();
  StopStreamingResponse::default_instance_ = new StopStreamingResponse();
  ShutdownRequest::default_instance_ = new ShutdownRequest();
  ShutdownResponse::default_instance_ = new ShutdownResponse();
  OfferDescriptor::default_instance_->InitAsDefaultInstance();
  AnswerDescriptor::default_instance_->InitAsDefaultInstance();
  CreateSessionDescriptionResponse::default_instance_->InitAsDefaultInstance();
  SetSessionDescriptionResponse::default_instance_->InitAsDefaultInstance();
  SessionDescription::default_instance_->InitAsDefaultInstance();
  StartStreamingRequest::default_instance_->InitAsDefaultInstance();
  StartStreamingResponse::default_instance_->InitAsDefaultInstance();
  StopStreamingRequest::default_instance_->InitAsDefaultInstance();
  StopStreamingResponse::default_instance_->InitAsDefaultInstance();
  ShutdownRequest::default_instance_->InitAsDefaultInstance();
  ShutdownResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_peer_5fconnection_5fapi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_peer_5fconnection_5fapi_2eproto {
  StaticDescriptorInitializer_peer_5fconnection_5fapi_2eproto() {
    protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  }
} static_descriptor_initializer_peer_5fconnection_5fapi_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int OfferDescriptor::kContentTypeFieldNumber;
#endif  // !_MSC_VER

OfferDescriptor::OfferDescriptor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.OfferDescriptor)
}

void OfferDescriptor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OfferDescriptor::OfferDescriptor(const OfferDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.OfferDescriptor)
}

void OfferDescriptor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OfferDescriptor::~OfferDescriptor() {
  // @@protoc_insertion_point(destructor:peer_connection.OfferDescriptor)
  SharedDtor();
}

void OfferDescriptor::SharedDtor() {
  content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OfferDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferDescriptor_descriptor_;
}

const OfferDescriptor& OfferDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

OfferDescriptor* OfferDescriptor::default_instance_ = NULL;

OfferDescriptor* OfferDescriptor::New(::google::protobuf::Arena* arena) const {
  OfferDescriptor* n = new OfferDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfferDescriptor::Clear() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OfferDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.OfferDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.OfferDescriptor.content_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.OfferDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.OfferDescriptor)
  return false;
#undef DO_
}

void OfferDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.OfferDescriptor)
  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.OfferDescriptor.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.OfferDescriptor)
}

::google::protobuf::uint8* OfferDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.OfferDescriptor)
  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.OfferDescriptor.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.OfferDescriptor)
  return target;
}

int OfferDescriptor::ByteSize() const {
  int total_size = 0;

  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OfferDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferDescriptor::MergeFrom(const OfferDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.content_type().size() > 0) {

    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
}

void OfferDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferDescriptor::CopyFrom(const OfferDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDescriptor::IsInitialized() const {

  return true;
}

void OfferDescriptor::Swap(OfferDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfferDescriptor::InternalSwap(OfferDescriptor* other) {
  content_type_.Swap(&other->content_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfferDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferDescriptor_descriptor_;
  metadata.reflection = OfferDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerDescriptor::kSessionDescriptionFieldNumber;
#endif  // !_MSC_VER

AnswerDescriptor::AnswerDescriptor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.AnswerDescriptor)
}

void AnswerDescriptor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  session_description_ = const_cast< ::peer_connection::SessionDescription*>(&::peer_connection::SessionDescription::default_instance());
}

AnswerDescriptor::AnswerDescriptor(const AnswerDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.AnswerDescriptor)
}

void AnswerDescriptor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  session_description_ = NULL;
}

AnswerDescriptor::~AnswerDescriptor() {
  // @@protoc_insertion_point(destructor:peer_connection.AnswerDescriptor)
  SharedDtor();
}

void AnswerDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete session_description_;
  }
}

void AnswerDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerDescriptor_descriptor_;
}

const AnswerDescriptor& AnswerDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

AnswerDescriptor* AnswerDescriptor::default_instance_ = NULL;

AnswerDescriptor* AnswerDescriptor::New(::google::protobuf::Arena* arena) const {
  AnswerDescriptor* n = new AnswerDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnswerDescriptor::Clear() {
  if (session_description_ != NULL) delete session_description_;
  session_description_ = NULL;
}

bool AnswerDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.AnswerDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .peer_connection.SessionDescription session_description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.AnswerDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.AnswerDescriptor)
  return false;
#undef DO_
}

void AnswerDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.AnswerDescriptor)
  // optional .peer_connection.SessionDescription session_description = 1;
  if (this->has_session_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_description_, output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.AnswerDescriptor)
}

::google::protobuf::uint8* AnswerDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.AnswerDescriptor)
  // optional .peer_connection.SessionDescription session_description = 1;
  if (this->has_session_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->session_description_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.AnswerDescriptor)
  return target;
}

int AnswerDescriptor::ByteSize() const {
  int total_size = 0;

  // optional .peer_connection.SessionDescription session_description = 1;
  if (this->has_session_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_description_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnswerDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerDescriptor::MergeFrom(const AnswerDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_session_description()) {
    mutable_session_description()->::peer_connection::SessionDescription::MergeFrom(from.session_description());
  }
}

void AnswerDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerDescriptor::CopyFrom(const AnswerDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerDescriptor::IsInitialized() const {

  return true;
}

void AnswerDescriptor::Swap(AnswerDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnswerDescriptor::InternalSwap(AnswerDescriptor* other) {
  std::swap(session_description_, other->session_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnswerDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerDescriptor_descriptor_;
  metadata.reflection = AnswerDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSessionDescriptionResponse::kResponseCodeFieldNumber;
const int CreateSessionDescriptionResponse::kResponseDescriptionFieldNumber;
const int CreateSessionDescriptionResponse::kSessionDescriptionFieldNumber;
#endif  // !_MSC_VER

CreateSessionDescriptionResponse::CreateSessionDescriptionResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.CreateSessionDescriptionResponse)
}

void CreateSessionDescriptionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  session_description_ = const_cast< ::peer_connection::SessionDescription*>(&::peer_connection::SessionDescription::default_instance());
}

CreateSessionDescriptionResponse::CreateSessionDescriptionResponse(const CreateSessionDescriptionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.CreateSessionDescriptionResponse)
}

void CreateSessionDescriptionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0u;
  response_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_description_ = NULL;
}

CreateSessionDescriptionResponse::~CreateSessionDescriptionResponse() {
  // @@protoc_insertion_point(destructor:peer_connection.CreateSessionDescriptionResponse)
  SharedDtor();
}

void CreateSessionDescriptionResponse::SharedDtor() {
  response_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete session_description_;
  }
}

void CreateSessionDescriptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionDescriptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionDescriptionResponse_descriptor_;
}

const CreateSessionDescriptionResponse& CreateSessionDescriptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

CreateSessionDescriptionResponse* CreateSessionDescriptionResponse::default_instance_ = NULL;

CreateSessionDescriptionResponse* CreateSessionDescriptionResponse::New(::google::protobuf::Arena* arena) const {
  CreateSessionDescriptionResponse* n = new CreateSessionDescriptionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionDescriptionResponse::Clear() {
  response_code_ = 0u;
  response_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (session_description_ != NULL) delete session_description_;
  session_description_ = NULL;
}

bool CreateSessionDescriptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.CreateSessionDescriptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response_description;
        break;
      }

      // optional string response_description = 2;
      case 2: {
        if (tag == 18) {
         parse_response_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_description().data(), this->response_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.CreateSessionDescriptionResponse.response_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_description;
        break;
      }

      // optional .peer_connection.SessionDescription session_description = 3;
      case 3: {
        if (tag == 26) {
         parse_session_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.CreateSessionDescriptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.CreateSessionDescriptionResponse)
  return false;
#undef DO_
}

void CreateSessionDescriptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.CreateSessionDescriptionResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_code(), output);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.CreateSessionDescriptionResponse.response_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_description(), output);
  }

  // optional .peer_connection.SessionDescription session_description = 3;
  if (this->has_session_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->session_description_, output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.CreateSessionDescriptionResponse)
}

::google::protobuf::uint8* CreateSessionDescriptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.CreateSessionDescriptionResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_code(), target);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.CreateSessionDescriptionResponse.response_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_description(), target);
  }

  // optional .peer_connection.SessionDescription session_description = 3;
  if (this->has_session_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->session_description_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.CreateSessionDescriptionResponse)
  return target;
}

int CreateSessionDescriptionResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_code());
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_description());
  }

  // optional .peer_connection.SessionDescription session_description = 3;
  if (this->has_session_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_description_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionDescriptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateSessionDescriptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSessionDescriptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSessionDescriptionResponse::MergeFrom(const CreateSessionDescriptionResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
  if (from.response_description().size() > 0) {

    response_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_description_);
  }
  if (from.has_session_description()) {
    mutable_session_description()->::peer_connection::SessionDescription::MergeFrom(from.session_description());
  }
}

void CreateSessionDescriptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionDescriptionResponse::CopyFrom(const CreateSessionDescriptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionDescriptionResponse::IsInitialized() const {

  return true;
}

void CreateSessionDescriptionResponse::Swap(CreateSessionDescriptionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionDescriptionResponse::InternalSwap(CreateSessionDescriptionResponse* other) {
  std::swap(response_code_, other->response_code_);
  response_description_.Swap(&other->response_description_);
  std::swap(session_description_, other->session_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionDescriptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionDescriptionResponse_descriptor_;
  metadata.reflection = CreateSessionDescriptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSessionDescriptionResponse::kResponseCodeFieldNumber;
const int SetSessionDescriptionResponse::kResponseDescriptionFieldNumber;
#endif  // !_MSC_VER

SetSessionDescriptionResponse::SetSessionDescriptionResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.SetSessionDescriptionResponse)
}

void SetSessionDescriptionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetSessionDescriptionResponse::SetSessionDescriptionResponse(const SetSessionDescriptionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.SetSessionDescriptionResponse)
}

void SetSessionDescriptionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0u;
  response_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetSessionDescriptionResponse::~SetSessionDescriptionResponse() {
  // @@protoc_insertion_point(destructor:peer_connection.SetSessionDescriptionResponse)
  SharedDtor();
}

void SetSessionDescriptionResponse::SharedDtor() {
  response_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetSessionDescriptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSessionDescriptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSessionDescriptionResponse_descriptor_;
}

const SetSessionDescriptionResponse& SetSessionDescriptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

SetSessionDescriptionResponse* SetSessionDescriptionResponse::default_instance_ = NULL;

SetSessionDescriptionResponse* SetSessionDescriptionResponse::New(::google::protobuf::Arena* arena) const {
  SetSessionDescriptionResponse* n = new SetSessionDescriptionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetSessionDescriptionResponse::Clear() {
  response_code_ = 0u;
  response_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetSessionDescriptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.SetSessionDescriptionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response_description;
        break;
      }

      // optional string response_description = 2;
      case 2: {
        if (tag == 18) {
         parse_response_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_description().data(), this->response_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.SetSessionDescriptionResponse.response_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.SetSessionDescriptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.SetSessionDescriptionResponse)
  return false;
#undef DO_
}

void SetSessionDescriptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.SetSessionDescriptionResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_code(), output);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.SetSessionDescriptionResponse.response_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_description(), output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.SetSessionDescriptionResponse)
}

::google::protobuf::uint8* SetSessionDescriptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.SetSessionDescriptionResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_code(), target);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.SetSessionDescriptionResponse.response_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.SetSessionDescriptionResponse)
  return target;
}

int SetSessionDescriptionResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_code());
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSessionDescriptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetSessionDescriptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSessionDescriptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSessionDescriptionResponse::MergeFrom(const SetSessionDescriptionResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
  if (from.response_description().size() > 0) {

    response_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_description_);
  }
}

void SetSessionDescriptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSessionDescriptionResponse::CopyFrom(const SetSessionDescriptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSessionDescriptionResponse::IsInitialized() const {

  return true;
}

void SetSessionDescriptionResponse::Swap(SetSessionDescriptionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSessionDescriptionResponse::InternalSwap(SetSessionDescriptionResponse* other) {
  std::swap(response_code_, other->response_code_);
  response_description_.Swap(&other->response_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetSessionDescriptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSessionDescriptionResponse_descriptor_;
  metadata.reflection = SetSessionDescriptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionDescription::kContentTypeFieldNumber;
const int SessionDescription::kSessionDescriptionFieldNumber;
#endif  // !_MSC_VER

SessionDescription::SessionDescription()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.SessionDescription)
}

void SessionDescription::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SessionDescription::SessionDescription(const SessionDescription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.SessionDescription)
}

void SessionDescription::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SessionDescription::~SessionDescription() {
  // @@protoc_insertion_point(destructor:peer_connection.SessionDescription)
  SharedDtor();
}

void SessionDescription::SharedDtor() {
  content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SessionDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionDescription_descriptor_;
}

const SessionDescription& SessionDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

SessionDescription* SessionDescription::default_instance_ = NULL;

SessionDescription* SessionDescription::New(::google::protobuf::Arena* arena) const {
  SessionDescription* n = new SessionDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionDescription::Clear() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SessionDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.SessionDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.SessionDescription.content_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_description;
        break;
      }

      // optional string session_description = 2;
      case 2: {
        if (tag == 18) {
         parse_session_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_description().data(), this->session_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.SessionDescription.session_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.SessionDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.SessionDescription)
  return false;
#undef DO_
}

void SessionDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.SessionDescription)
  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.SessionDescription.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content_type(), output);
  }

  // optional string session_description = 2;
  if (this->session_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_description().data(), this->session_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.SessionDescription.session_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_description(), output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.SessionDescription)
}

::google::protobuf::uint8* SessionDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.SessionDescription)
  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.SessionDescription.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content_type(), target);
  }

  // optional string session_description = 2;
  if (this->session_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_description().data(), this->session_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.SessionDescription.session_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.SessionDescription)
  return target;
}

int SessionDescription::ByteSize() const {
  int total_size = 0;

  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_type());
  }

  // optional string session_description = 2;
  if (this->session_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionDescription::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SessionDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionDescription::MergeFrom(const SessionDescription& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.content_type().size() > 0) {

    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
  if (from.session_description().size() > 0) {

    session_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_description_);
  }
}

void SessionDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionDescription::CopyFrom(const SessionDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionDescription::IsInitialized() const {

  return true;
}

void SessionDescription::Swap(SessionDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionDescription::InternalSwap(SessionDescription* other) {
  content_type_.Swap(&other->content_type_);
  session_description_.Swap(&other->session_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionDescription_descriptor_;
  metadata.reflection = SessionDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StartStreamingRequest::StartStreamingRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.StartStreamingRequest)
}

void StartStreamingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartStreamingRequest::StartStreamingRequest(const StartStreamingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.StartStreamingRequest)
}

void StartStreamingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StartStreamingRequest::~StartStreamingRequest() {
  // @@protoc_insertion_point(destructor:peer_connection.StartStreamingRequest)
  SharedDtor();
}

void StartStreamingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartStreamingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartStreamingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartStreamingRequest_descriptor_;
}

const StartStreamingRequest& StartStreamingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

StartStreamingRequest* StartStreamingRequest::default_instance_ = NULL;

StartStreamingRequest* StartStreamingRequest::New(::google::protobuf::Arena* arena) const {
  StartStreamingRequest* n = new StartStreamingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartStreamingRequest::Clear() {
}

bool StartStreamingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.StartStreamingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.StartStreamingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.StartStreamingRequest)
  return false;
#undef DO_
}

void StartStreamingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.StartStreamingRequest)
  // @@protoc_insertion_point(serialize_end:peer_connection.StartStreamingRequest)
}

::google::protobuf::uint8* StartStreamingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.StartStreamingRequest)
  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.StartStreamingRequest)
  return target;
}

int StartStreamingRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStreamingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StartStreamingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartStreamingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartStreamingRequest::MergeFrom(const StartStreamingRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StartStreamingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStreamingRequest::CopyFrom(const StartStreamingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStreamingRequest::IsInitialized() const {

  return true;
}

void StartStreamingRequest::Swap(StartStreamingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartStreamingRequest::InternalSwap(StartStreamingRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartStreamingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartStreamingRequest_descriptor_;
  metadata.reflection = StartStreamingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartStreamingResponse::kResponseCodeFieldNumber;
const int StartStreamingResponse::kResponseDescriptionFieldNumber;
#endif  // !_MSC_VER

StartStreamingResponse::StartStreamingResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.StartStreamingResponse)
}

void StartStreamingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartStreamingResponse::StartStreamingResponse(const StartStreamingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.StartStreamingResponse)
}

void StartStreamingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0u;
  response_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StartStreamingResponse::~StartStreamingResponse() {
  // @@protoc_insertion_point(destructor:peer_connection.StartStreamingResponse)
  SharedDtor();
}

void StartStreamingResponse::SharedDtor() {
  response_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StartStreamingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartStreamingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartStreamingResponse_descriptor_;
}

const StartStreamingResponse& StartStreamingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

StartStreamingResponse* StartStreamingResponse::default_instance_ = NULL;

StartStreamingResponse* StartStreamingResponse::New(::google::protobuf::Arena* arena) const {
  StartStreamingResponse* n = new StartStreamingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartStreamingResponse::Clear() {
  response_code_ = 0u;
  response_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.StartStreamingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response_description;
        break;
      }

      // optional string response_description = 2;
      case 2: {
        if (tag == 18) {
         parse_response_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_description().data(), this->response_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.StartStreamingResponse.response_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.StartStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.StartStreamingResponse)
  return false;
#undef DO_
}

void StartStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.StartStreamingResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_code(), output);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.StartStreamingResponse.response_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_description(), output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.StartStreamingResponse)
}

::google::protobuf::uint8* StartStreamingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.StartStreamingResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_code(), target);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.StartStreamingResponse.response_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.StartStreamingResponse)
  return target;
}

int StartStreamingResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_code());
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StartStreamingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartStreamingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartStreamingResponse::MergeFrom(const StartStreamingResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
  if (from.response_description().size() > 0) {

    response_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_description_);
  }
}

void StartStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStreamingResponse::CopyFrom(const StartStreamingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStreamingResponse::IsInitialized() const {

  return true;
}

void StartStreamingResponse::Swap(StartStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartStreamingResponse::InternalSwap(StartStreamingResponse* other) {
  std::swap(response_code_, other->response_code_);
  response_description_.Swap(&other->response_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartStreamingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartStreamingResponse_descriptor_;
  metadata.reflection = StartStreamingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopStreamingRequest::StopStreamingRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.StopStreamingRequest)
}

void StopStreamingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopStreamingRequest::StopStreamingRequest(const StopStreamingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.StopStreamingRequest)
}

void StopStreamingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StopStreamingRequest::~StopStreamingRequest() {
  // @@protoc_insertion_point(destructor:peer_connection.StopStreamingRequest)
  SharedDtor();
}

void StopStreamingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopStreamingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopStreamingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopStreamingRequest_descriptor_;
}

const StopStreamingRequest& StopStreamingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

StopStreamingRequest* StopStreamingRequest::default_instance_ = NULL;

StopStreamingRequest* StopStreamingRequest::New(::google::protobuf::Arena* arena) const {
  StopStreamingRequest* n = new StopStreamingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopStreamingRequest::Clear() {
}

bool StopStreamingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.StopStreamingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.StopStreamingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.StopStreamingRequest)
  return false;
#undef DO_
}

void StopStreamingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.StopStreamingRequest)
  // @@protoc_insertion_point(serialize_end:peer_connection.StopStreamingRequest)
}

::google::protobuf::uint8* StopStreamingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.StopStreamingRequest)
  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.StopStreamingRequest)
  return target;
}

int StopStreamingRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopStreamingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StopStreamingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopStreamingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopStreamingRequest::MergeFrom(const StopStreamingRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StopStreamingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopStreamingRequest::CopyFrom(const StopStreamingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopStreamingRequest::IsInitialized() const {

  return true;
}

void StopStreamingRequest::Swap(StopStreamingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopStreamingRequest::InternalSwap(StopStreamingRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopStreamingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopStreamingRequest_descriptor_;
  metadata.reflection = StopStreamingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopStreamingResponse::kResponseCodeFieldNumber;
const int StopStreamingResponse::kResponseDescriptionFieldNumber;
#endif  // !_MSC_VER

StopStreamingResponse::StopStreamingResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.StopStreamingResponse)
}

void StopStreamingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopStreamingResponse::StopStreamingResponse(const StopStreamingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.StopStreamingResponse)
}

void StopStreamingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0u;
  response_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopStreamingResponse::~StopStreamingResponse() {
  // @@protoc_insertion_point(destructor:peer_connection.StopStreamingResponse)
  SharedDtor();
}

void StopStreamingResponse::SharedDtor() {
  response_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopStreamingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopStreamingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopStreamingResponse_descriptor_;
}

const StopStreamingResponse& StopStreamingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

StopStreamingResponse* StopStreamingResponse::default_instance_ = NULL;

StopStreamingResponse* StopStreamingResponse::New(::google::protobuf::Arena* arena) const {
  StopStreamingResponse* n = new StopStreamingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopStreamingResponse::Clear() {
  response_code_ = 0u;
  response_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StopStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.StopStreamingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response_description;
        break;
      }

      // optional string response_description = 2;
      case 2: {
        if (tag == 18) {
         parse_response_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_description().data(), this->response_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.StopStreamingResponse.response_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.StopStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.StopStreamingResponse)
  return false;
#undef DO_
}

void StopStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.StopStreamingResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_code(), output);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.StopStreamingResponse.response_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_description(), output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.StopStreamingResponse)
}

::google::protobuf::uint8* StopStreamingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.StopStreamingResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_code(), target);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.StopStreamingResponse.response_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.StopStreamingResponse)
  return target;
}

int StopStreamingResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_code());
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StopStreamingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopStreamingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopStreamingResponse::MergeFrom(const StopStreamingResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
  if (from.response_description().size() > 0) {

    response_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_description_);
  }
}

void StopStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopStreamingResponse::CopyFrom(const StopStreamingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopStreamingResponse::IsInitialized() const {

  return true;
}

void StopStreamingResponse::Swap(StopStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopStreamingResponse::InternalSwap(StopStreamingResponse* other) {
  std::swap(response_code_, other->response_code_);
  response_description_.Swap(&other->response_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopStreamingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopStreamingResponse_descriptor_;
  metadata.reflection = StopStreamingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.ShutdownRequest)
}

void ShutdownRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:peer_connection.ShutdownRequest)
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownRequest_descriptor_;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

ShutdownRequest* ShutdownRequest::default_instance_ = NULL;

ShutdownRequest* ShutdownRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownRequest* n = new ShutdownRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownRequest::Clear() {
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.ShutdownRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.ShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.ShutdownRequest)
  return false;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.ShutdownRequest)
  // @@protoc_insertion_point(serialize_end:peer_connection.ShutdownRequest)
}

::google::protobuf::uint8* ShutdownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.ShutdownRequest)
  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.ShutdownRequest)
  return target;
}

int ShutdownRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShutdownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {

  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownRequest::InternalSwap(ShutdownRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownRequest_descriptor_;
  metadata.reflection = ShutdownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutdownResponse::kResponseCodeFieldNumber;
const int ShutdownResponse::kResponseDescriptionFieldNumber;
#endif  // !_MSC_VER

ShutdownResponse::ShutdownResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peer_connection.ShutdownResponse)
}

void ShutdownResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peer_connection.ShutdownResponse)
}

void ShutdownResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0u;
  response_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:peer_connection.ShutdownResponse)
  SharedDtor();
}

void ShutdownResponse::SharedDtor() {
  response_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ShutdownResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownResponse_descriptor_;
}

const ShutdownResponse& ShutdownResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fconnection_5fapi_2eproto();
  return *default_instance_;
}

ShutdownResponse* ShutdownResponse::default_instance_ = NULL;

ShutdownResponse* ShutdownResponse::New(::google::protobuf::Arena* arena) const {
  ShutdownResponse* n = new ShutdownResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownResponse::Clear() {
  response_code_ = 0u;
  response_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ShutdownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peer_connection.ShutdownResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response_description;
        break;
      }

      // optional string response_description = 2;
      case 2: {
        if (tag == 18) {
         parse_response_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_description().data(), this->response_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_connection.ShutdownResponse.response_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peer_connection.ShutdownResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peer_connection.ShutdownResponse)
  return false;
#undef DO_
}

void ShutdownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peer_connection.ShutdownResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_code(), output);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.ShutdownResponse.response_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_description(), output);
  }

  // @@protoc_insertion_point(serialize_end:peer_connection.ShutdownResponse)
}

::google::protobuf::uint8* ShutdownResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peer_connection.ShutdownResponse)
  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_code(), target);
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_description().data(), this->response_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_connection.ShutdownResponse.response_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:peer_connection.ShutdownResponse)
  return target;
}

int ShutdownResponse::ByteSize() const {
  int total_size = 0;

  // optional uint32 response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_code());
  }

  // optional string response_description = 2;
  if (this->response_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShutdownResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
  if (from.response_description().size() > 0) {

    response_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_description_);
  }
}

void ShutdownResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {

  return true;
}

void ShutdownResponse::Swap(ShutdownResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  std::swap(response_code_, other->response_code_);
  response_description_.Swap(&other->response_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownResponse_descriptor_;
  metadata.reflection = ShutdownResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace peer_connection

// @@protoc_insertion_point(global_scope)

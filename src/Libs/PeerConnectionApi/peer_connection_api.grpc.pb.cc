// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: peer_connection_api.proto

#include "peer_connection_api.pb.h"
#include "peer_connection_api.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace peer_connection {

static const char* PeerConnectionApi_method_names[] = {
  "/peer_connection.PeerConnectionApi/createOffer",
  "/peer_connection.PeerConnectionApi/createAnswer",
  "/peer_connection.PeerConnectionApi/setLocalDescription",
  "/peer_connection.PeerConnectionApi/setRemoteDescription",
  "/peer_connection.PeerConnectionApi/startStreaming",
  "/peer_connection.PeerConnectionApi/stopStreaming",
  "/peer_connection.PeerConnectionApi/shutdown",
};

std::unique_ptr< PeerConnectionApi::Stub> PeerConnectionApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< PeerConnectionApi::Stub> stub(new PeerConnectionApi::Stub(channel));
  return stub;
}

PeerConnectionApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_createOffer_(PeerConnectionApi_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[0]))
  , rpcmethod_createAnswer_(PeerConnectionApi_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[1]))
  , rpcmethod_setLocalDescription_(PeerConnectionApi_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[2]))
  , rpcmethod_setRemoteDescription_(PeerConnectionApi_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[3]))
  , rpcmethod_startStreaming_(PeerConnectionApi_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[4]))
  , rpcmethod_stopStreaming_(PeerConnectionApi_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[5]))
  , rpcmethod_shutdown_(PeerConnectionApi_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(PeerConnectionApi_method_names[6]))
  {}

::grpc::Status PeerConnectionApi::Stub::createOffer(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::peer_connection::CreateSessionDescriptionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_createOffer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>* PeerConnectionApi::Stub::AsynccreateOfferRaw(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>(channel(), cq, rpcmethod_createOffer_, context, request, tag);
}

::grpc::Status PeerConnectionApi::Stub::createAnswer(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::peer_connection::CreateSessionDescriptionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_createAnswer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>* PeerConnectionApi::Stub::AsynccreateAnswerRaw(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>(channel(), cq, rpcmethod_createAnswer_, context, request, tag);
}

::grpc::Status PeerConnectionApi::Stub::setLocalDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::peer_connection::SetSessionDescriptionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_setLocalDescription_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>* PeerConnectionApi::Stub::AsyncsetLocalDescriptionRaw(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>(channel(), cq, rpcmethod_setLocalDescription_, context, request, tag);
}

::grpc::Status PeerConnectionApi::Stub::setRemoteDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::peer_connection::SetSessionDescriptionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_setRemoteDescription_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>* PeerConnectionApi::Stub::AsyncsetRemoteDescriptionRaw(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>(channel(), cq, rpcmethod_setRemoteDescription_, context, request, tag);
}

::grpc::Status PeerConnectionApi::Stub::startStreaming(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::peer_connection::StartStreamingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_startStreaming_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::StartStreamingResponse>* PeerConnectionApi::Stub::AsyncstartStreamingRaw(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::StartStreamingResponse>(channel(), cq, rpcmethod_startStreaming_, context, request, tag);
}

::grpc::Status PeerConnectionApi::Stub::stopStreaming(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::peer_connection::StopStreamingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_stopStreaming_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::StopStreamingResponse>* PeerConnectionApi::Stub::AsyncstopStreamingRaw(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::StopStreamingResponse>(channel(), cq, rpcmethod_stopStreaming_, context, request, tag);
}

::grpc::Status PeerConnectionApi::Stub::shutdown(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::peer_connection::ShutdownResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_shutdown_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::peer_connection::ShutdownResponse>* PeerConnectionApi::Stub::AsyncshutdownRaw(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncResponseReader< ::peer_connection::ShutdownResponse>(channel(), cq, rpcmethod_shutdown_, context, request, tag);
}

PeerConnectionApi::AsyncService::AsyncService(::grpc::CompletionQueue* cq) : ::grpc::AsynchronousService(cq, PeerConnectionApi_method_names, 7) {}

PeerConnectionApi::Service::~Service() {
  delete service_;
}

::grpc::Status PeerConnectionApi::Service::createOffer(::grpc::ServerContext* context, const ::peer_connection::OfferDescriptor* request, ::peer_connection::CreateSessionDescriptionResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::RequestcreateOffer(::grpc::ServerContext* context, ::peer_connection::OfferDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::CreateSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, cq, tag);
}

::grpc::Status PeerConnectionApi::Service::createAnswer(::grpc::ServerContext* context, const ::peer_connection::AnswerDescriptor* request, ::peer_connection::CreateSessionDescriptionResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::RequestcreateAnswer(::grpc::ServerContext* context, ::peer_connection::AnswerDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::CreateSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, cq, tag);
}

::grpc::Status PeerConnectionApi::Service::setLocalDescription(::grpc::ServerContext* context, const ::peer_connection::SessionDescription* request, ::peer_connection::SetSessionDescriptionResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::RequestsetLocalDescription(::grpc::ServerContext* context, ::peer_connection::SessionDescription* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::SetSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, cq, tag);
}

::grpc::Status PeerConnectionApi::Service::setRemoteDescription(::grpc::ServerContext* context, const ::peer_connection::SessionDescription* request, ::peer_connection::SetSessionDescriptionResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::RequestsetRemoteDescription(::grpc::ServerContext* context, ::peer_connection::SessionDescription* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::SetSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, cq, tag);
}

::grpc::Status PeerConnectionApi::Service::startStreaming(::grpc::ServerContext* context, const ::peer_connection::StartStreamingRequest* request, ::peer_connection::StartStreamingResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::RequeststartStreaming(::grpc::ServerContext* context, ::peer_connection::StartStreamingRequest* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::StartStreamingResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(4, context, request, response, cq, tag);
}

::grpc::Status PeerConnectionApi::Service::stopStreaming(::grpc::ServerContext* context, const ::peer_connection::StopStreamingRequest* request, ::peer_connection::StopStreamingResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::RequeststopStreaming(::grpc::ServerContext* context, ::peer_connection::StopStreamingRequest* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::StopStreamingResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(5, context, request, response, cq, tag);
}

::grpc::Status PeerConnectionApi::Service::shutdown(::grpc::ServerContext* context, const ::peer_connection::ShutdownRequest* request, ::peer_connection::ShutdownResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void PeerConnectionApi::AsyncService::Requestshutdown(::grpc::ServerContext* context, ::peer_connection::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::ShutdownResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(6, context, request, response, cq, tag);
}

::grpc::RpcService* PeerConnectionApi::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::OfferDescriptor, ::peer_connection::CreateSessionDescriptionResponse>(
          std::mem_fn(&PeerConnectionApi::Service::createOffer), this),
      new ::peer_connection::OfferDescriptor, new ::peer_connection::CreateSessionDescriptionResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::AnswerDescriptor, ::peer_connection::CreateSessionDescriptionResponse>(
          std::mem_fn(&PeerConnectionApi::Service::createAnswer), this),
      new ::peer_connection::AnswerDescriptor, new ::peer_connection::CreateSessionDescriptionResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::SessionDescription, ::peer_connection::SetSessionDescriptionResponse>(
          std::mem_fn(&PeerConnectionApi::Service::setLocalDescription), this),
      new ::peer_connection::SessionDescription, new ::peer_connection::SetSessionDescriptionResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::SessionDescription, ::peer_connection::SetSessionDescriptionResponse>(
          std::mem_fn(&PeerConnectionApi::Service::setRemoteDescription), this),
      new ::peer_connection::SessionDescription, new ::peer_connection::SetSessionDescriptionResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::StartStreamingRequest, ::peer_connection::StartStreamingResponse>(
          std::mem_fn(&PeerConnectionApi::Service::startStreaming), this),
      new ::peer_connection::StartStreamingRequest, new ::peer_connection::StartStreamingResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::StopStreamingRequest, ::peer_connection::StopStreamingResponse>(
          std::mem_fn(&PeerConnectionApi::Service::stopStreaming), this),
      new ::peer_connection::StopStreamingRequest, new ::peer_connection::StopStreamingResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PeerConnectionApi_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PeerConnectionApi::Service, ::peer_connection::ShutdownRequest, ::peer_connection::ShutdownResponse>(
          std::mem_fn(&PeerConnectionApi::Service::shutdown), this),
      new ::peer_connection::ShutdownRequest, new ::peer_connection::ShutdownResponse));
  return service_;
}


}  // namespace peer_connection


// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: peer_connection_api.proto
#ifndef GRPC_peer_5fconnection_5fapi_2eproto__INCLUDED
#define GRPC_peer_5fconnection_5fapi_2eproto__INCLUDED

#include "peer_connection_api.pb.h"

#include <grpc++/impl/internal_stub.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/async_unary_call.h>
#include <grpc++/status.h>
#include <grpc++/stream.h>

namespace grpc {
class CompletionQueue;
class ChannelInterface;
class RpcService;
class ServerContext;
}  // namespace grpc

namespace peer_connection {

class PeerConnectionApi GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status createOffer(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::peer_connection::CreateSessionDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::CreateSessionDescriptionResponse>> AsynccreateOffer(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::CreateSessionDescriptionResponse>>(AsynccreateOfferRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status createAnswer(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::peer_connection::CreateSessionDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::CreateSessionDescriptionResponse>> AsynccreateAnswer(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::CreateSessionDescriptionResponse>>(AsynccreateAnswerRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status setLocalDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::peer_connection::SetSessionDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::SetSessionDescriptionResponse>> AsyncsetLocalDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::SetSessionDescriptionResponse>>(AsyncsetLocalDescriptionRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status setRemoteDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::peer_connection::SetSessionDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::SetSessionDescriptionResponse>> AsyncsetRemoteDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::SetSessionDescriptionResponse>>(AsyncsetRemoteDescriptionRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status startStreaming(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::peer_connection::StartStreamingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::StartStreamingResponse>> AsyncstartStreaming(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::StartStreamingResponse>>(AsyncstartStreamingRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status stopStreaming(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::peer_connection::StopStreamingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::StopStreamingResponse>> AsyncstopStreaming(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::StopStreamingResponse>>(AsyncstopStreamingRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status shutdown(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::peer_connection::ShutdownResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::ShutdownResponse>> Asyncshutdown(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::ShutdownResponse>>(AsyncshutdownRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::CreateSessionDescriptionResponse>* AsynccreateOfferRaw(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::CreateSessionDescriptionResponse>* AsynccreateAnswerRaw(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::SetSessionDescriptionResponse>* AsyncsetLocalDescriptionRaw(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::SetSessionDescriptionResponse>* AsyncsetRemoteDescriptionRaw(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::StartStreamingResponse>* AsyncstartStreamingRaw(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::StopStreamingResponse>* AsyncstopStreamingRaw(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::peer_connection::ShutdownResponse>* AsyncshutdownRaw(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface, public ::grpc::InternalStub {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status createOffer(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::peer_connection::CreateSessionDescriptionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>> AsynccreateOffer(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>>(AsynccreateOfferRaw(context, request, cq, tag));
    }
    ::grpc::Status createAnswer(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::peer_connection::CreateSessionDescriptionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>> AsynccreateAnswer(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>>(AsynccreateAnswerRaw(context, request, cq, tag));
    }
    ::grpc::Status setLocalDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::peer_connection::SetSessionDescriptionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>> AsyncsetLocalDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>>(AsyncsetLocalDescriptionRaw(context, request, cq, tag));
    }
    ::grpc::Status setRemoteDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::peer_connection::SetSessionDescriptionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>> AsyncsetRemoteDescription(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>>(AsyncsetRemoteDescriptionRaw(context, request, cq, tag));
    }
    ::grpc::Status startStreaming(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::peer_connection::StartStreamingResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::StartStreamingResponse>> AsyncstartStreaming(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::StartStreamingResponse>>(AsyncstartStreamingRaw(context, request, cq, tag));
    }
    ::grpc::Status stopStreaming(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::peer_connection::StopStreamingResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::StopStreamingResponse>> AsyncstopStreaming(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::StopStreamingResponse>>(AsyncstopStreamingRaw(context, request, cq, tag));
    }
    ::grpc::Status shutdown(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::peer_connection::ShutdownResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::ShutdownResponse>> Asyncshutdown(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::peer_connection::ShutdownResponse>>(AsyncshutdownRaw(context, request, cq, tag));
    }

   private:
    ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>* AsynccreateOfferRaw(::grpc::ClientContext* context, const ::peer_connection::OfferDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::peer_connection::CreateSessionDescriptionResponse>* AsynccreateAnswerRaw(::grpc::ClientContext* context, const ::peer_connection::AnswerDescriptor& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>* AsyncsetLocalDescriptionRaw(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::peer_connection::SetSessionDescriptionResponse>* AsyncsetRemoteDescriptionRaw(::grpc::ClientContext* context, const ::peer_connection::SessionDescription& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::peer_connection::StartStreamingResponse>* AsyncstartStreamingRaw(::grpc::ClientContext* context, const ::peer_connection::StartStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::peer_connection::StopStreamingResponse>* AsyncstopStreamingRaw(::grpc::ClientContext* context, const ::peer_connection::StopStreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::peer_connection::ShutdownResponse>* AsyncshutdownRaw(::grpc::ClientContext* context, const ::peer_connection::ShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_createOffer_;
    const ::grpc::RpcMethod rpcmethod_createAnswer_;
    const ::grpc::RpcMethod rpcmethod_setLocalDescription_;
    const ::grpc::RpcMethod rpcmethod_setRemoteDescription_;
    const ::grpc::RpcMethod rpcmethod_startStreaming_;
    const ::grpc::RpcMethod rpcmethod_stopStreaming_;
    const ::grpc::RpcMethod rpcmethod_shutdown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status createOffer(::grpc::ServerContext* context, const ::peer_connection::OfferDescriptor* request, ::peer_connection::CreateSessionDescriptionResponse* response);
    virtual ::grpc::Status createAnswer(::grpc::ServerContext* context, const ::peer_connection::AnswerDescriptor* request, ::peer_connection::CreateSessionDescriptionResponse* response);
    virtual ::grpc::Status setLocalDescription(::grpc::ServerContext* context, const ::peer_connection::SessionDescription* request, ::peer_connection::SetSessionDescriptionResponse* response);
    virtual ::grpc::Status setRemoteDescription(::grpc::ServerContext* context, const ::peer_connection::SessionDescription* request, ::peer_connection::SetSessionDescriptionResponse* response);
    virtual ::grpc::Status startStreaming(::grpc::ServerContext* context, const ::peer_connection::StartStreamingRequest* request, ::peer_connection::StartStreamingResponse* response);
    virtual ::grpc::Status stopStreaming(::grpc::ServerContext* context, const ::peer_connection::StopStreamingRequest* request, ::peer_connection::StopStreamingResponse* response);
    virtual ::grpc::Status shutdown(::grpc::ServerContext* context, const ::peer_connection::ShutdownRequest* request, ::peer_connection::ShutdownResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService(::grpc::CompletionQueue* cq);
    ~AsyncService() {};
    void RequestcreateOffer(::grpc::ServerContext* context, ::peer_connection::OfferDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::CreateSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestcreateAnswer(::grpc::ServerContext* context, ::peer_connection::AnswerDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::CreateSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestsetLocalDescription(::grpc::ServerContext* context, ::peer_connection::SessionDescription* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::SetSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestsetRemoteDescription(::grpc::ServerContext* context, ::peer_connection::SessionDescription* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::SetSessionDescriptionResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequeststartStreaming(::grpc::ServerContext* context, ::peer_connection::StartStreamingRequest* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::StartStreamingResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequeststopStreaming(::grpc::ServerContext* context, ::peer_connection::StopStreamingRequest* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::StopStreamingResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void Requestshutdown(::grpc::ServerContext* context, ::peer_connection::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::peer_connection::ShutdownResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
  };
};

}  // namespace peer_connection


#endif  // GRPC_peer_5fconnection_5fapi_2eproto__INCLUDED

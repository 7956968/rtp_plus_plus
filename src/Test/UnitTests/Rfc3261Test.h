#pragma once
#include <boost/algorithm/string.hpp>
#include <boost/regex.hpp>
#include <rtp++/rfc2326/RtspUtil.h>
#include <rtp++/rfc3261/SipDialog.h>
#include <rtp++/rfc3261/SipUri.h>
#include <rtp++/rfc3261/SipMessage.h>

#define RFC3261_TEST_LOG_LEVEL 10

namespace rtp_plus_plus
{
namespace test {

/**
 * @brief tests parsing of SIP URI
 */
BOOST_AUTO_TEST_SUITE(Rfc3261Test)
BOOST_AUTO_TEST_CASE(test_parseSipUri)
{
  boost::optional<rfc3261::SipUri> pSipUri = rfc3261::SipUri::parse("sip:Anon@10.0.0.7;tag=s2tr");
  BOOST_CHECK_EQUAL(pSipUri.is_initialized(), true);

  boost::optional<rfc3261::SipUri> pSipUri2 = rfc3261::SipUri::parse("sip:ralf@10.0.0.4:5060");
  BOOST_CHECK_EQUAL(pSipUri2.is_initialized(), true);
}
/**
 * @brief tests parsing an ACK message generated by linphone
 */
BOOST_AUTO_TEST_CASE(test_parseAck)
{
  std::ostringstream ack;
  ack << "ACK sip:alice@10.0.0.24 SIP/2.0\r\n";
  ack << "Via: SIP/2.0/UDP 10.0.0.21:5060;rport;branch=z9hG4bK.jHFY-Ag4z\r\n";
  ack << "From: \"Bob\" <sip:Bob@10.0.0.21>;tag=lY8vVZCOv\r\n";
  ack << "To: <sip:alice@10.0.0.24>;tag=frAQ\r\n";
  ack << "CSeq: 20 ACK\r\n";
  ack << "Call-ID: kTszBSODpC\r\n";
  ack << "Max-Forwards: 70\r\n\r\n";

  VLOG(RFC3261_TEST_LOG_LEVEL) << "ACK: " << ack.str();

  boost::optional<rfc3261::SipMessage> pAck = rfc3261::SipMessage::create(ack.str());
  BOOST_CHECK_EQUAL(pAck.is_initialized(), true);

  boost::optional<rfc3261::DialogId_t> id = rfc3261::extractDialogId(*pAck, true);
  VLOG(RFC3261_TEST_LOG_LEVEL) << "CALL-ID: " << std::get<0>(*id);
  BOOST_CHECK_EQUAL(std::get<0>(*id), "kTszBSODpC");
  VLOG(RFC3261_TEST_LOG_LEVEL) << "To: " << std::get<2>(*id);
  BOOST_CHECK_EQUAL(std::get<2>(*id), "frAQ");
  VLOG(RFC3261_TEST_LOG_LEVEL) << "From: " << std::get<1>(*id);
  BOOST_CHECK_EQUAL(std::get<1>(*id), "lY8vVZCOv");
  VLOG(RFC3261_TEST_LOG_LEVEL) << "From URI: " << pAck->getFromUri();
  BOOST_CHECK_EQUAL(pAck->getFromUri(), "sip:Bob@10.0.0.21");
  VLOG(RFC3261_TEST_LOG_LEVEL) << "From display name: " << pAck->getFromDisplayName();
  BOOST_CHECK_EQUAL(pAck->getFromDisplayName(), "\"Bob\"");
  VLOG(RFC3261_TEST_LOG_LEVEL) << "To URI: " << pAck->getToUri();
  BOOST_CHECK_EQUAL(pAck->getToUri(), "sip:alice@10.0.0.24");
  VLOG(RFC3261_TEST_LOG_LEVEL) << "To display name: " << pAck->getToDisplayName();
  BOOST_CHECK_EQUAL(pAck->getToDisplayName(), "");
}
/**
 * @brief This test gets rid of mid-header field new lines i.e. new lines followed by space or tab characters.
 */
BOOST_AUTO_TEST_CASE(test_parseMultilineHeaderFields)
{
  std::string sMultilineHeaderField   = "SomeField:SomeValue value continued";
  std::string sMultilineHeaderField_1 = "SomeField:SomeValue\r\n"\
                                        " value continued";
  std::string sMultilineHeaderField_2 = "SomeField:SomeValue\r\n"\
                                        "  value continued";
  std::string sMultilineHeaderField_3 = "SomeField:SomeValue\r\n"\
                                        "\tvalue continued";
  std::string sMultilineHeaderField_4 = "SomeField:SomeValue\r\n"\
                                        "\t\tvalue continued";
  std::string sMultilineHeaderField_5 = "SomeField:SomeValue\r\n"\
                                        "\t value continued";
  std::string sMultilineHeaderField_6 = "SomeField:SomeValue\r\n"\
                                        " \tvalue continued";

  boost::regex regex("(\r\n([ \t])*)");
  std::string s1 = boost::regex_replace(sMultilineHeaderField_1, regex, " ");
  std::string s2 = boost::regex_replace(sMultilineHeaderField_2, regex, " ");
  std::string s3 = boost::regex_replace(sMultilineHeaderField_3, regex, " ");
  std::string s4 = boost::regex_replace(sMultilineHeaderField_4, regex, " ");
  std::string s5 = boost::regex_replace(sMultilineHeaderField_5, regex, " ");
  std::string s6 = boost::regex_replace(sMultilineHeaderField_6, regex, " ");
  BOOST_CHECK_EQUAL(sMultilineHeaderField, s1);
  BOOST_CHECK_EQUAL(sMultilineHeaderField, s2);
  BOOST_CHECK_EQUAL(sMultilineHeaderField, s3);
  BOOST_CHECK_EQUAL(sMultilineHeaderField, s4);
  BOOST_CHECK_EQUAL(sMultilineHeaderField, s5);
  BOOST_CHECK_EQUAL(sMultilineHeaderField, s6);
}

/**
 * @brief Test parsing of SIP URIs using URIs in http://tools.ietf.org/html/rfc3261#section-19.1
 */
BOOST_AUTO_TEST_CASE(test_parseSipUriParsing)
{
  const std::string sUri1 = "sip:alice@atlanta.com";
  const std::string sUri2 = "sip:alice:secretword@atlanta.com;transport=tcp";
  const std::string sUri3 = "sips:alice@atlanta.com?subject=project%20x&priority=urgent";
  const std::string sUri4 = "sip:+1-212-555-1212:1234@gateway.com;user=phone";
  const std::string sUri5 = "sips:1212@gateway.com";
  const std::string sUri6 = "sip:alice@192.0.2.4";
  const std::string sUri7 = "sip:atlanta.com;method=REGISTER?to=alice%40atlanta.com";
  const std::string sUri8 = "sip:alice;day=tuesday@atlanta.com";
  BOOST_CHECK_EQUAL(sUri1, *(rfc3261::SipUri::parse(sUri1)->toString()));
  BOOST_CHECK_EQUAL(sUri2, *(rfc3261::SipUri::parse(sUri2)->toString()));
  BOOST_CHECK_EQUAL(sUri3, *(rfc3261::SipUri::parse(sUri3)->toString()));
  BOOST_CHECK_EQUAL(sUri4, *(rfc3261::SipUri::parse(sUri4)->toString()));
  BOOST_CHECK_EQUAL(sUri5, *(rfc3261::SipUri::parse(sUri5)->toString()));
  BOOST_CHECK_EQUAL(sUri6, *(rfc3261::SipUri::parse(sUri6)->toString()));
  BOOST_CHECK_EQUAL(sUri7, *(rfc3261::SipUri::parse(sUri7)->toString()));
  BOOST_CHECK_EQUAL(sUri8, *(rfc3261::SipUri::parse(sUri8)->toString()));

  DLOG(INFO) << "TODO: add SIP URI checks that fail";
}

BOOST_AUTO_TEST_SUITE_END()

} // test
} // rtp_plus_plus
